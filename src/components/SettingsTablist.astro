---
import ProxyTab from "./SettingsContent/ProxyTab.astro";
import CustomizationTab from "./SettingsContent/CustomizationTab.astro";
---

<div class="content-hidden">
    <div id="content-setting-tab-proxy">
        <h1 class="content-setting-header">Proxy</h1>
        <ProxyTab />

    </div>
    <div id="content-setting-tab-customization">
        <h1 class="content-setting-header">Customization</h1>
        <CustomizationTab />
    </div>
    <div id="content-setting-tab-cloaking">
        <h1 class="content-setting-header">Cloaking</h1>
        <p style="color: white;">Cloaking settings</p>
    </div>
    <div id="content-setting-tab-credits">
        <h1 class="content-setting-header">Credits</h1>
        <p style="color: white;">Credits settings</p>
    </div>
</div>

<div class="popup">
    <div class="tabs">
          <input type="radio" id="setting-tab-proxy" class="setting-tab" name="tab" checked="true">        
        <label for="setting-tab-proxy">Proxy</label>
          <input type="radio" id="setting-tab-customization" class="setting-tab" name="tab">
        <label for="setting-tab-customization">Customization</label>
          <input type="radio" id="setting-tab-cloaking" class="setting-tab" name="tab">
        <label for="setting-tab-cloaking">Cloaking</label>
          <input type="radio" id="setting-tab-credits" class="setting-tab" name="tab">
        <label for="setting-tab-credits">Credits</label>
        <div class="marker">
           <div id="top"></div>
           <div id="bottom"></div>
        </div>
    </div>
    <div id="current-content">
        
    </div>
  </div>
  <script>
    import { navigate } from 'astro:transitions/client';

    // Extend window object to store currently selected tab.
    declare global {
        interface Window { 
          currentlySelectedTab: string,
          loadedContentStorage: any // Technically this is an object storing strings of html, but im lazy.
        }
    }

    document.addEventListener("astro:before-swap", () => {
      window.currentlySelectedTab = ""
      document.removeEventListener('setting-tabChange', determineListener as EventListener)
    })
    window.currentlySelectedTab;
    window.loadedContentStorage = {}

    function beginLoad() {
        Array.from(document.getElementsByClassName('setting-tab')).forEach((tab)=>{
          let contentToLoad = document.getElementById('content-' + tab.id)
          if (contentToLoad) {
            window.loadedContentStorage[tab.id] = contentToLoad.innerHTML
            contentToLoad.remove()
          }

          tab.addEventListener('click', (event) => {
            loadContent((event.target as HTMLElement).id)
          })
      })
    }
    beginLoad();


    function loadContent(tabID: string) {
      if (window.currentlySelectedTab == tabID) return
        else window.currentlySelectedTab = tabID
        let currentContent = document.getElementById('current-content')
        if (currentContent) {
          currentContent.style.opacity = '0'
          setTimeout(() => {
            if (currentContent) {
              currentContent.innerHTML = window.loadedContentStorage[tabID]
              currentContent.style.opacity = '1'
            } else {
              throw new Error("Current content not found!")
            }
            document.dispatchEvent(new CustomEvent('setting-tabChange', {detail: tabID }))
            document.dispatchEvent(new CustomEvent('setting-tabLoad', {detail: tabID }))
          }, 250);
        }
    }

    function addDropdownListener() {
      let dropdown_toggles = document.getElementsByClassName('dropdown-toggle')
      Array.from(dropdown_toggles).forEach((toggle) => {
        toggle.addEventListener('click', () => {
          let dropdown = document.getElementById(toggle.id + "-menu")
          if (dropdown) {
            if (dropdown.style.maxHeight == '0px' || dropdown.style.maxHeight == '') {
              dropdown.style.maxHeight = dropdown.scrollHeight + 'px';
              document.getElementById(toggle.id)!.style.borderRadius = '10px 10px 0 0';
            } else {
              dropdown.style.maxHeight = '0px';
              setTimeout(() => {
                document.getElementById(toggle.id)!.style.borderRadius = '10px';
              }, 300);
            }
          }
        })
      })
    }

    function determineListener(event: CustomEvent) {
      if (event.detail == "setting-tab-proxy") {
        addDropdownListener()
      } else if (event.detail == "setting-tab-customization") {
        addDropdownListener()
      }
    }

    function closeDropdown(dropdownID: string) {
      let dropdown = document.getElementById(dropdownID)
      if (dropdown) {
        dropdown.style.maxHeight = '0px';
        setTimeout(() => {
          let dropdown_toggle = document.getElementById(dropdownID.replace('-menu', ''));
          if (dropdown_toggle) {
            dropdown_toggle.style.borderRadius = '10px';
          } else {
            throw new Error("Dropdown toggle not found!")
          }
        }, 300);
      }
    }

    function applySavedLocalStorage(localStorageItem: string, dropdownID: string) {
      if (localStorage.getItem(localStorageItem)) {
        let dropdown_toggle = document.getElementById(dropdownID);
        if (dropdown_toggle) {
          dropdown_toggle.innerText = (localStorage.getItem(localStorageItem) || "").charAt(0).toUpperCase() + (localStorage.getItem(localStorageItem) || "").slice(1)
        }
      }
    }

    function applyDropdownEventListeners(item: HTMLElement, dropdownID: string, localStorageItem: string, optionalCallback: Function | undefined = undefined) {
      Array.from(item.children).forEach((item) => {
          item.addEventListener('click', () => {
            // TODO: Allow an optional field for a custom localStorage value, instead of the input value.
            localStorage.setItem(localStorageItem, ((item as HTMLElement).dataset.setting) || "")
            applySavedLocalStorage(localStorageItem, dropdownID)
            if (item.parentElement) {
              closeDropdown(item.parentElement.id);
            }

            if (typeof optionalCallback == "function") {
              optionalCallback();
            }
          })
        })
    }

    function applyInputListeners(item: HTMLInputElement, localStorageItem: string) {
      item.addEventListener('input', () => {
        // TODO: Allow an optional field for a custom localStorage value, instead of the input value.
        localStorage.setItem(localStorageItem, item.value)
      })
    }

    document.addEventListener('setting-tabChange', determineListener as EventListener)

    loadContent('setting-tab-proxy')

    function setupCustomizationSettings() {
      applySavedLocalStorage('alu__selectedTheme', 'dropdown__selected-theme');
      applySavedLocalStorage('alu__selectedLanguage', 'dropdown__selected-language');
      // TODO: Null checking lol.
      let dropdownTheme = document.getElementById('dropdown__selected-theme-menu') as HTMLElement
      let dropdownLanguage = document.getElementById('dropdown__selected-language-menu') as HTMLElement
      applyDropdownEventListeners(dropdownTheme, 'dropdown__selected-theme', 'alu__selectedTheme', changeTheme);
      applyDropdownEventListeners(dropdownLanguage, 'dropdown__selected-language', 'alu__selectedLanguage', navigateToNewLangaugePage);
    }

    function navigateToNewLangaugePage() {
      console.log("Here")
      console.log(localStorage.getItem("alu__selectedLanguage"))
      switch (localStorage.getItem("alu__selectedLanguage")) {
        case "English":
          window.location.href = "/en/settings/"
          break;
        case "日本語":
          window.location.href = "/jp/settings/"
          break;
      }
      beginLoad();

    }

    function changeTheme() {
      // || "" is safe to use here, because it will default to the default theme if the localStorage item is not found.
      let theme = localStorage.getItem('alu__selectedTheme') || ""
      if (theme) {
        document.documentElement.setAttribute('data-theme', theme.toLowerCase())
      }
      let footer = document.getElementById('footer');
      if (footer) {
          footer.dataset.theme = theme.toLowerCase();
      }
    }

    function setupSettings(event: CustomEvent) {
      if (event.detail == "setting-tab-proxy") {
          applySavedLocalStorage('alu__selectedProxy', 'dropdown__selected-proxy');
          applySavedLocalStorage('alu__search_engine', 'dropdown__search-engine');
          applySavedLocalStorage("alu__selectedOpenWith", 'dropdown__open-with');
          let selectedProxyDropdown = document.getElementById('dropdown__selected-proxy-menu') as HTMLElement
          let searchEngineDropdown = document.getElementById('dropdown__search-engine-menu') as HTMLElement
          let openWithDropdown = document.getElementById('dropdown__open-with-menu') as HTMLElement
          let bareUrlInput = document.getElementById('bare-url-input') as HTMLInputElement
          let searxngUrlInput = document.getElementById('searxng-url-input') as HTMLInputElement
          let savedSearxngUrl = localStorage.getItem("alu__searxngUrl")
          if (savedSearxngUrl != undefined) {
            if (savedSearxngUrl == "") localStorage.setItem("alu__searxngUrl", "https://searxng.site/")
            // Typescript.. we literally make sure that it won't be undefined RIGHT ABOVE THIS COMMENT.
            if (searxngUrlInput) searxngUrlInput.value = localStorage.getItem("alu__searxngUrl") || "https://searxng.site/"
          }
          // Proxy settings
          applyInputListeners(bareUrlInput, 'alu__bareUrl')
          applyInputListeners(searxngUrlInput, 'alu__searxngUrl')
          applyDropdownEventListeners(searchEngineDropdown, 'dropdown__search-engine', 'alu__search_engine', checkSearxng);
          applyDropdownEventListeners(selectedProxyDropdown, 'dropdown__selected-proxy', 'alu__selectedProxy');
          applyDropdownEventListeners(openWithDropdown, 'dropdown__open-with', 'alu__selectedOpenWith');
          // Currently does nothing functionally, but it's here for future use.
          if (localStorage.getItem('alu__bareUrl')) {
            bareUrlInput.value = localStorage.getItem('bareUrl') || ""
          } else {
            bareUrlInput.value = '/bare/'
          }
          checkSearxng();
        } else if (event.detail == "setting-tab-customization") {
          setupCustomizationSettings();
        }
    }

    function checkSearxng() {
      // This function checks if the "searxng" option was clicked, display an additional option if so.
      if (localStorage.getItem("alu__search_engine")) {
        if ((localStorage.getItem("alu__search_engine") || "").toLowerCase() == "searx") {
          (document.getElementsByClassName('setting__searxng-url')[0] as HTMLElement).style.opacity = '1'
        } else {
          (document.getElementsByClassName('setting__searxng-url')[0] as HTMLElement).style.opacity = '0'
        }
      }
    }

    document.addEventListener('setting-tabLoad', setupSettings as EventListener);
</script>
<style is:global>
.content-hidden {
    display: none;
}
#current-content {
    transition: opacity 250ms ease-in-out;
    margin-left: 20px;
}
.settings-container {
    display: flex;
    gap: 20px;
    position: relative;
    z-index: 2;
}
.content-setting-header {
  color: var(--text-color);
}
.setting-label {
  color: var(--text-color);
  font-size: 18px;
  /* annoying stuff with label elements. */
  display: block;
  opacity: 1.0;
  margin-block: 1em;
  margin-inline: 0;
  user-select: none;
  width: 100%;
}

.setting__searxng-url {
  margin-top: 10px;
  opacity: 0;
  transition: opacity 250ms ease-in-out;
}
label {
  font-size: 24px;
  font-weight: 700; 
  cursor: pointer; 
  color: #d8d8d8; 
  opacity: .4; 
  transition: opacity .4s ease-in-out;
  display: block; 
  width: calc(100% - 48px) ;
  text-align: right; 
  z-index: 100; 
  user-select: none;
  text-align: start;
  margin-left: 20px;
}
input[type="radio"]{
  display: none;
  width: 0;
}
label:hover, input[type="radio"]:checked+label {
  opacity: 1; 
}
.popup{
  width: 98%;
  height: 80%;
  margin: 0 auto;
  min-height: 400px; 
  max-height: 400px; 
  border-radius: 48px;
  box-sizing: border-box; 
  background-color: var(--background-color);
  overflow: hidden;
  display: flex;
  align-self: center;
}
.tabs{
  width: 100%;
  max-width: 240px;
  height: 100%;
  display: flex;
  flex-direction: column; 
  justify-content: space-around; 
  position: relative;
  gap: 25px
}
.marker{
  position: absolute; 
  width: 100%;
  height: 200%;
  display: flex; 
  flex-direction: column;
  top: calc(-100% );
  left: 0;
  transition: transform .2s ease-in-out;
  background-color: var(--accent-color);
}
.marker #bottom, .marker #top{
  background-color: var(--background-highlight);
}
.marker #top{
  height: calc(50%);
  margin-bottom: auto; 
  border-radius: 0 0 32px 0; 
}
.marker #bottom{
  height: calc(50% - 72px);
  border-radius: 0 32px 0 0; 
}
#setting-tab-proxy:checked ~ .marker{transform: translateY(0%)}
#setting-tab-customization:checked ~ .marker{transform: translateY(13.5%)}
#setting-tab-cloaking:checked ~ .marker{transform: translateY(27%)}
#setting-tab-credits:checked ~ .marker{transform: translateY(41%)}
</style>