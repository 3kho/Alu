<script>
  // @ts-ignore
  // I HATE YOU VSCODE AAAAAAAAAAAAAA
  import { SetTransport, registerRemoteListener } from "@mercuryworkshop/bare-mux";
  // @ts-check
  declare global {
    interface Window {
      __uv$config: {
        prefix: string;
      };
    }
  };

  type transportConfig = {
    wisp: string;
    wasm?: string;
  }

  const wispURLDefault =
    (location.protocol === "https:" ? "wss://" : "ws://") + location.host + "/";
  class TransportManager {
    private transport = "EpxMod.EpoxyClient";

    constructor(transport?: string) {
      if (transport) {
        this.transport = transport;
      }
      if (localStorage.getItem("alu__selectedTransport") != null && !transport) {
        this.transport = JSON.parse(localStorage.getItem("alu__selectedTransport")!).value;
      }
      if (localStorage.getItem("alu__selectedTransport") == null) {
        // Set the default transport for the next reload.
        localStorage.setItem("alu__selectedTransport", JSON.stringify({ value: this.transport }));
      }
    }
    getTransport() {
      return this.transport;
    }

    setTransport(transport: string, wispURL = wispURLDefault) {
      this.transport = transport;
      let transportConfig: transportConfig = { wisp: wispURL };
      if (this.transport == "CurlMod.LibcurlClient") {
        transportConfig.wasm = "https://cdn.jsdelivr.net/npm/libcurl.js@latest/libcurl.wasm";
      }
      SetTransport(this.transport, transportConfig);
    }
  }
  const TransportMgr = new TransportManager();
  registerRemoteListener(navigator.serviceWorker.controller!);
  let swRegister = navigator.serviceWorker.register("/sw.js", {
    scope: window.__uv$config.prefix,
  });
  swRegister.then((registration) => {
    registration.update().then(() => {
      TransportMgr.setTransport(TransportMgr.getTransport(), localStorage.getItem("alu__wispUrl") || wispURLDefault);
    });
  });
</script>
